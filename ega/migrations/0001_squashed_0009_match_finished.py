# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2018-02-18 16:12
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ega.models


class Migration(migrations.Migration):

    replaces = [('ega', '0001_initial'), ('ega', '0002_auto_20150419_1646'), ('ega', '0003_auto_20150426_1616'), ('ega', '0004_tournament_finished'), ('ega', '0005_auto_20150609_1938'), ('ega', '0006_auto_20151230_1602'), ('ega', '0007_auto_20160518_2020'), ('ega', '0008_auto_20161226_1656'), ('ega', '0009_match_finished')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EgaUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, help_text='Se recomienda subir una imagen de (al menos) 100x100', null=True, upload_to='avatars')),
                ('invite_key', models.CharField(default=ega.models.rand_str, max_length=20, unique=True)),
                ('referred_on', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('referred_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LeagueMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.League')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_goals', models.IntegerField(blank=True, null=True)),
                ('away_goals', models.IntegerField(blank=True, null=True)),
                ('round', models.CharField(blank=True, max_length=128)),
                ('knockout', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=128)),
                ('when', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('referee', models.CharField(blank=True, max_length=200)),
                ('starred', models.BooleanField(default=False)),
                ('suspended', models.BooleanField(default=False)),
                ('finished', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('when',),
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_goals', models.PositiveIntegerField(blank=True, null=True)),
                ('away_goals', models.PositiveIntegerField(blank=True, null=True)),
                ('trend', models.CharField(editable=False, max_length=1)),
                ('starred', models.BooleanField(default=False)),
                ('score', models.PositiveIntegerField(default=0)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.Match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('match__when',),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(blank=True, max_length=8)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='teams')),
            ],
        ),
        migrations.CreateModel(
            name='TeamStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone', models.CharField(blank=True, default='', max_length=64)),
                ('won', models.PositiveIntegerField(default=0)),
                ('tie', models.PositiveIntegerField(default=0)),
                ('lost', models.PositiveIntegerField(default=0)),
                ('gf', models.PositiveIntegerField(default=0)),
                ('gc', models.PositiveIntegerField(default=0)),
                ('points', models.PositiveIntegerField(default=0)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.Team')),
            ],
            options={
                'ordering': ('-points',),
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('published', models.BooleanField(default=False)),
                ('finished', models.BooleanField(default=False)),
                ('teams', models.ManyToManyField(to='ega.Team')),
            ],
        ),
        migrations.AddField(
            model_name='teamstats',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.Tournament'),
        ),
        migrations.AddField(
            model_name='match',
            name='away',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_games', to='ega.Team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_games', to='ega.Team'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.Tournament'),
        ),
        migrations.AddField(
            model_name='league',
            name='members',
            field=models.ManyToManyField(through='ega.LeagueMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='league',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ega.Tournament'),
        ),
        migrations.AlterUniqueTogether(
            name='teamstats',
            unique_together=set([('tournament', 'team')]),
        ),
        migrations.AlterUniqueTogether(
            name='prediction',
            unique_together=set([('user', 'match')]),
        ),
        migrations.AlterUniqueTogether(
            name='leaguemember',
            unique_together=set([('user', 'league')]),
        ),
        migrations.AlterUniqueTogether(
            name='league',
            unique_together=set([('name', 'tournament'), ('slug', 'tournament')]),
        ),
    ]
